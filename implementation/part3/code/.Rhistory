# clean files
rm(list=ls())
# libraries
library(sf)
library(ggplot2)
library(dplyr)
library(readr)
# bring csv
data <- read_csv("results_inversion.csv")
# clean files
rm(list=ls())
# libraries
library(sf)
library(ggplot2)
library(dplyr)
library(readr)
# bring csv
data <- read_csv("../output/results_inversion.csv")
setwd("~/Library/CloudStorage/Dropbox/courses-teaching/2025 Spring - Trade PHD/implementation/part2/code")
# clean files
rm(list=ls())
# libraries
library(sf)
library(ggplot2)
library(dplyr)
library(readr)
# bring csv
data <- read_csv("../output/results_inversion.csv")
View(data)
# clean files
rm(list=ls())
# libraries
library(sf)
library(ggplot2)
library(dplyr)
library(readr)
# bring csv
data <- read_csv("../output/results_inversion.csv", col_names=FALSE)
View(data)
# clean files
rm(list=ls())
# libraries
library(sf)
library(ggplot2)
library(dplyr)
library(readr)
# bring csv
data <- read_csv("../output/results_inversion.csv", col_names=FALSE)
colnames(data) <- c("microregion_code", "Tbar", "Bbar")
View(data)
# clean files
rm(list=ls())
# libraries
library(sf)
library(ggplot2)
library(dplyr)
library(readr)
# bring csv
data <- read_csv("../output/results_inversion.csv", col_names=FALSE)
colnames(data) <- c("microregion_code", "Tbar", "Bbar")
# bring shapefile
shapes <- st_read("../input/shapefile/BR_Microrregioes_2021.shp")
View(shapes)
map_data <- shapes %>% left_join(data, by = "CD_MICRO")
# clean files
rm(list=ls())
# libraries
library(sf)
library(ggplot2)
library(dplyr)
library(readr)
# bring csv
data <- read_csv("../output/results_inversion.csv", col_names=FALSE)
colnames(data) <- c("CD_MICRO", "Tbar", "Bbar")
# bring shapefile
shapes <- st_read("../input/shapefile/BR_Microrregioes_2021.shp")
map_data <- shapes %>% left_join(data, by = "CD_MICRO")
# clean files
rm(list=ls())
# libraries
library(sf)
library(ggplot2)
library(dplyr)
library(readr)
# bring csv
data <- read_csv("../output/results_inversion.csv", col_names=FALSE)
colnames(data) <- c("CD_MICRO", "Tbar", "Bbar")
# bring shapefile
shapes <- st_read("../input/shapefile/BR_Microrregioes_2021.shp")
# ensure both datasets are in characters
shapes$CD_MICRO <- as.character(shapes$CD_MICRO)
data$CD_MICRO <- as.character(data$CD_MICRO)
# join
map_data <- shapes %>% left_join(data, by = "CD_MICRO")
View(map_data)
ggplot() +
geom_sf(data = map_data, aes(fill = Tbar), color = "black", size = 0.1) +
scale_fill_viridis_c(option = "plasma", na.value = "white") +
theme_minimal() +
labs(fill = "Tbar", title = "Productivity Shifters")
# clean files
rm(list=ls())
# libraries
library(sf)
library(ggplot2)
library(dplyr)
library(readr)
library(rmapshaper)
# bring csv
data <- read_csv("../output/results_inversion.csv", col_names=FALSE)
colnames(data) <- c("CD_MICRO", "Tbar", "Bbar")
# bring shapefile
shapes <- st_read("../input/shapefile/BR_Microrregioes_2021.shp")
shapes <- ms_simplify(shapes, keep = 0.05)
# ensure both datasets are in characters
shapes$CD_MICRO <- as.character(shapes$CD_MICRO)
data$CD_MICRO <- as.character(data$CD_MICRO)
# join
map_data <- shapes %>% left_join(data, by = "CD_MICRO")
# make plot
ggplot() +
geom_sf(data = map_data, aes(fill = Tbar), color = "black", size = 0.1) +
scale_fill_viridis_c(option = "plasma", na.value = "white") +
theme_minimal() +
labs(fill = "Tbar", title = "Productivity Shifters")
# Create quintile bins
map_data <- map_data %>%
mutate(Tbar_quintile = cut(Tbar,
breaks = quantile(Tbar, probs = seq(0, 1, 0.2), na.rm = TRUE),
include.lowest = TRUE,
labels = c("Q1", "Q2", "Q3", "Q4", "Q5")))
# Plot with discrete fill
ggplot() +
geom_sf(data = map_data, aes(fill = Tbar_quintile), color = "black", size = 0.1) +
scale_fill_viridis_d(option = "plasma", na.value = "white") +  # Discrete scale
theme_minimal() +
labs(fill = "Tbar Quintile", title = "Productivity Shifters")
ggplot() +
geom_sf(data = map_data, aes(fill = Tbar_quintile), color = "black", size = 0.01) +
scale_fill_viridis_d(option = "plasma", na.value = "white") +  # Discrete scale
theme_minimal() +
labs(fill = "Tbar Quintile", title = "Productivity Shifters")
ggplot() +
geom_sf(data = map_data, aes(fill = Tbar_quintile), color = "black", size = 0.01) +
scale_fill_viridis_d(option = "plasma", na.value = "white") +  # Discrete scale
theme_minimal() +
labs(fill = "Tbar Quintile", title = "Productivity Shifters")
ggsave("microregion_map_Tbar.png", width = 8, height = 6, dpi = 300)
source("~/Library/CloudStorage/Dropbox/courses-teaching/2025 Spring - Trade PHD/implementation/part2/code/step_2_make_some_maps.R")
source("~/Library/CloudStorage/Dropbox/courses-teaching/2025 Spring - Trade PHD/implementation/part2/code/step_2_make_some_maps.R")
setwd("~/Library/CloudStorage/Dropbox/courses-teaching/2025 Spring - Trade PHD/implementation/part2/code")
# clean files
# btw, I used chatGPT a lot to write this code
rm(list=ls())
# libraries
library(sf)
library(ggplot2)
library(dplyr)
library(readr)
library(rmapshaper)
# bring csv
data <- read_csv("../output/results_inversion.csv", col_names=FALSE)
colnames(data) <- c("CD_MICRO", "Tbar", "Bbar")
# bring shapefile
shapes <- st_read("../input/shapefile/BR_Microrregioes_2021.shp")
shapes <- ms_simplify(shapes, keep = 0.05)
# ensure both datasets are in characters
shapes$CD_MICRO <- as.character(shapes$CD_MICRO)
data$CD_MICRO <- as.character(data$CD_MICRO)
# join
map_data <- shapes %>% left_join(data, by = "CD_MICRO")
source("~/Library/CloudStorage/Dropbox/courses-teaching/2025 Spring - Trade PHD/implementation/part2/code/step_2_make_some_maps.R")
source("~/Library/CloudStorage/Dropbox/courses-teaching/2025 Spring - Trade PHD/implementation/part2/code/step_2_make_some_maps.R")
source("~/Library/CloudStorage/Dropbox/courses-teaching/2025 Spring - Trade PHD/implementation/part3/code/step_4_make_some_maps.R")
source("~/Library/CloudStorage/Dropbox/courses-teaching/2025 Spring - Trade PHD/implementation/part3/code/step_4_make_some_maps.R")
View(data)
source("~/Library/CloudStorage/Dropbox/courses-teaching/2025 Spring - Trade PHD/implementation/part3/code/step_5_make_some_maps_forward_looking.R")
source("~/Library/CloudStorage/Dropbox/courses-teaching/2025 Spring - Trade PHD/implementation/part3/code/step_5_make_some_maps_forward_looking.R")
source("~/Library/CloudStorage/Dropbox/courses-teaching/2025 Spring - Trade PHD/implementation/part3/code/step_5_make_some_maps_forward_looking.R")
source("~/Library/CloudStorage/Dropbox/courses-teaching/2025 Spring - Trade PHD/implementation/part3/code/step_4_make_some_maps_myopic.R")
